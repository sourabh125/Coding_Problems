//-------------------------------*****(Solution:1)*****------------------------------------

class Solution {
public:
   bool isPossible(vector<int>& nums,int diff,int p)
   {
       for(int i=1;i<nums.size();i++)
       {
           if(nums[i]-nums[i-1]<=diff)
           {
               p--;
               i++;
           }
       }
       return p<=0;
   }
    int minimizeMax(vector<int>& nums, int p) {
        
        int n=nums.size();
        sort(nums.begin(),nums.end());
        int start=0;
        int end=nums[n-1]-nums[0];

        for(int i=end;i>=0;i--)
        {
            if(!isPossible(nums,i,p))
            {
                return i+1;
                break;
            }
        }
        return 0;
    }
};



//-------------------------------*****(Solution:2)*****------------------------------------
class Solution {
public:
    bool solve(vector<int>&nums,int mid,int p)
    {
        int n=nums.size();
        int c=0;
        for(int i=0;i<n-1;i++)
        {
            if(nums[i+1]-nums[i]<=mid)
            {
                i++;
                c++;
            }
            if(c>=p) return true;
        }
        return false;
    }
    int minimizeMax(vector<int>& nums, int p) {
        
        if(p==0) return 0;
        int n=nums.size();
        sort(nums.begin(),nums.end());
        
        int low=0,high=nums[n-1]-nums[0];
        while(low<high)
        {
            int mid=(low+high)/2;
            
            if(solve(nums,mid,p))
            {
                high=mid;
            }
            else
            {
                low=mid+1;
            }
        }
        return low;
 
    }
};

