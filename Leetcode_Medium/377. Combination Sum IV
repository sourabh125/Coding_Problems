



class Solution {
public:
    // void solve_recursion(vector<int>& nums, int target,int sum,int n,int& count)
    // {
    //     if(sum==target)
    //     {
    //         count++;return;
    //     }
    //     if(sum>target) return;

    //     for(int i=0;i<n;i++)
    //     {
    //         solve_recursion(nums,target,sum+nums[i],n,count);
    //     }
    // }


    int solve_recursion(vector<int>& nums, int target,int sum,int n)
    {
        int count=0;
        if(sum==target)
        {
            return 1;
        }
        if(sum>target) return 0;

        for(int i=0;i<n;i++)
        {
            count+=solve_recursion(nums,target,sum+nums[i],n);
        }
        return count;
    }

    int solveMemoization(vector<int>& nums, int target,int n,vector<int>& dp)
    {
        if(target==0) return 1; 
        if(target<0) return 0;

        int ans=0;
        if(dp[target]!=-1) return dp[target];
        for(int i=0;i<n;i++)
        {
            ans+=solveMemoization(nums,target-nums[i],n,dp);
        }
        dp[target]=ans;
        return dp[target];
    }

    int combinationSum4(vector<int>& nums, int target) {
        
        int count=0;
        //return solve_recursion(nums,target,0,nums.size());
        // return count;

        vector<int> dp(target+1,-1);
        return solveMemoization(nums,target,nums.size(),dp);
    }
};
