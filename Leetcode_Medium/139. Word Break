

// --------------------------------------*********** Solution :1 (Getting TLE) **********----------------------------------------

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        
        int ns=s.size();
        if(s=="a" && wordDict[0]=="a") return true;
        for(int i=0;i<wordDict.size();i++)
        {
            int k=0;
            int meet=-1;
            bool track=false;
            for(int j=0;j<s.size();j++)
            {
                if(k==wordDict[i].size() || (k==wordDict[i].size()-1 && wordDict[i][k]==s[j]))
                {
                    s.erase(s.begin()+meet,s.begin()+j+1);
                    cout<<s<<",";
                    track=true;
                    break;
                }
                else if(wordDict[i][k]==s[j])
                {
                    if(meet==-1) meet=j;
                    k++;
                }
                else if(k!=wordDict[i].size() || wordDict[i][k]!=s[j])
                {
                    j=meet+1;
                    meet=-1;
                    k=0;
                }
            }
            if(!track) return false;
        }
        return true;
    }
};

// ----------------------------------------*********** Solution 2: (Optimization Aproach) **************--------------------------------

class Solution {
public:
   int dp[301];
    int solve(int i,string &s,set<string>& wordDict)
    {
        if(i==s.size()) return 1;
        string temp="";
        if(dp[i]!=-1)
        {
            return dp[i];
        }
        for(int j=i;j<s.size();j++)
        {
            temp+=s[j];
            if(wordDict.find(temp)!=wordDict.end())
            {
                if(solve(j+1,s,wordDict)) return dp[i]=1;
            }
        }
        return dp[i]=0;
    }
    bool wordBreak(string s, vector<string>& wordDict) {
        
        set<string> st;
        memset(dp,-1,sizeof dp);
        for(auto a:wordDict)
        {
            st.insert(a);
        }
        return solve(0,s,st);
    }
};
