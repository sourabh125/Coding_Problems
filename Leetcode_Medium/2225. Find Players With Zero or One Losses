class Solution {
public:

    vector<vector<int>> solve_BF_1(vector<vector<int>> & matches){    
        int n=matches.size();
        set<int> st;
        vector<vector<int>> ans;
        vector<int> v1;
        vector<int> v2;
        for(int i=0;i<n;i++){
            st.insert(matches[i][0]);
            st.insert(matches[i][1]);
        }
        int stSize=st.size();
        for(auto i:st){
            int count=0;
            for(int j=0;j<n;j++){
                if(i==matches[j][1]){
                    count++;
                }
            }
            if(count==0) v1.push_back(i);
            else if(count==1) v2.push_back(i);
        }

        ans.push_back(v1);
        ans.push_back(v2);
        return ans;
    }

    vector<vector<int>> solve_BF_2(vector<vector<int>>& matches){ 
        int n=matches.size();
        set<int> st;
        vector<vector<int>> ans;
        vector<int> v1;
        vector<int> v2;
        map<int,int> mp;                      // For loosers only start from 1 or greater
        for(int i=0;i<n;i++){
            st.insert(matches[i][0]);
            st.insert(matches[i][1]);
            mp[matches[i][1]]++;
        }
        for(auto i:mp){
            if(i.second==1){
                v2.push_back(i.first);
            }
        }
        int stSize=st.size();
        for(auto i:st){
            if(mp[i]) continue;
            else v1.push_back(i);
        }
        ans.push_back(v1);
        ans.push_back(v2);
        return ans;
    }

    vector<vector<int>> solve_optimized_1(vector<vector<int>>& matches){
        int n=matches.size();
        vector<int> v1;
        vector<int> v2;
        map<int,int> mp;
        for(int i=0;i<n;i++){
            if(!mp[matches[i][0]]) mp[matches[i][0]]=0;
            if(!mp[matches[i][1]]) mp[matches[i][1]]=0;

            mp[matches[i][1]]++;
        }
        for(auto i:mp){
            if(i.second==0) v1.push_back(i.first);
            else if(i.second==1) v2.push_back(i.first);
        }
        return {v1,v2};
    }
    vector<vector<int>> findWinners(vector<vector<int>>& matches) {
        
        // return solve_BF_1(matches);            // Getting TLE
        // return solve_BF_2(matches);                // Submitted successfully but taking more time and space;

        return solve_optimized_1(matches);          // Optimized by time ans space complexity (a little)
    }
};
