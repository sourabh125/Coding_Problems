



#include <algorithm>
class Solution {
public:
   
    string solve_1(string s){
        map<char,int> mp;
        priority_queue<pair<int,char>,vector<pair<int,char>>> pq;
        int n=s.size();
        for(int i=0;i<n;i++){
            mp[s[i]]++;
        }
        
        for(auto i:mp){
            pq.push({i.second,i.first});
        }
        string ans="";
        while(!pq.empty()){
            auto temp=pq.top();
            while(temp.first){
                ans+=pq.top().second;
                temp.first--;
            }
            pq.pop();
        }
        return ans;
    }
    string solve_key_val_replace(string s){
        vector<pair<int,int>> v;
        int n=s.size();
        for(int i=0;i<n;i++){
             if(v[s[i]-'a']){
                 v[s[i]-'a']++;
             }
             else v.push_back({s[i],1});
        }
        for(int i=0;i<n;i++){
            cout<<v[i].first<<" "<<v[i].second<<endl;
        }
        return "";
    }
    string frequencySort(string s) {
        
        // return solve_1(s);
        return solve_key_val_replace(s);
    }
};
