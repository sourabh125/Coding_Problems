
class Solution {
public:
    vector<int> ans;
   
    void solve_Binary_search(vector<int>& nums,int target,int start,int end)
    {
        int mid=(start+end)/2;
        if(start>end) return;
        if(nums[mid]==target){
            ans[0]=mid;
            ans[1]=mid;
            end=mid-1;
        }
        else if(nums[mid]>target) end=mid-1;
        else start=mid+1;
        solve_Binary_search(nums,target,start,end);
    }
    void solve_Binary_search2(vector<int>& nums,int target,int start,int end)
    {
        int mid=(start+end)/2;
        if(start>end) return;
        if(nums[mid]==target){
            ans[1]=mid;
            start=mid+1;
        }
        else if(nums[mid]>target) end=mid-1;
        else start=mid+1;
        solve_Binary_search2(nums,target,start,end);
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        ans.push_back(-1); 
        ans.push_back(-1);
        if(ans[1]!=-1) ans[1]+=1;
        solve_Binary_search(nums,target,0,n-1);
        solve_Binary_search2(nums,target,0,n-1);
        return ans;
    }
};
