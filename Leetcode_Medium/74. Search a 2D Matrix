// RADHA SWAMI JI

// Solution 1 - TC->O(log(m*n)

class Solution {
public:
bool binary_search(int row,vector<int> m,int target)        // FInd perticular element by this fuction 
{
    int start=0;
    int end=m.size()-1;
   
    while(start<=end)                             // Binnary search
    { 
         int mid=(start+end)/2;
         if(m[mid]==target)
         {
             return true;
         }
         else if(m[mid]>target)
         {
              end=mid-1;
         }
         else if(m[mid]<target)
         {
             start=mid+1;
         }
    }
    return false;
    
}
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int m=matrix.size()-1;
        int n=matrix[0].size()-1;
        int start=0;
        int end=m;
        while(start<=end)             // Find row in which element is there      (binary search
        {
            int mid=(start+end)/2;
            if(matrix[mid][0]<=target && matrix[mid][n]>=target)
            {
                 return binary_search(mid, matrix[mid],target);         // Find element in that perticular row
            }
            else if(matrix[mid][0]>target)
            {
                end=mid-1;
            }
            else if(matrix[mid][0]<target)
            {
                start=mid+1;
            }
        }
        return false;
    }
};



//-------------------------------------------------------------------------------------------------
//solution 2- TC-> O(NLogN)

class Solution {
public:
bool binary_search(int row,vector<vector<int>> m,int target)
{
    int start=0;
    int end=m[row].size()-1;
   
    while(start<=end)
    {
         int mid=(start+end)/2;
         if(m[row][mid]==target)
         {
             return true;
         }
         else if(m[row][mid]>target)
         {
              end=mid-1;
         }
         else if(m[row][mid]<target)
         {
            
             start=mid+1;
         }
    }
    return false;
    
}
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int m=matrix.size()-1;
        int n=matrix[0].size()-1;
        for(int i=0;i<=m;i++)
        {
            if(matrix[i][0]<=target && matrix[i][n]>=target)
            {
                return binary_search(i, matrix,target);
                break;
            }
        }
        return false;
    }
};




// -------------------------------------------------- Mix SOlution all in one ------------------------


class Solution {
public:
bool solve_In_NN(vector<vector<int>>& matrix,int target)
{
    int n=matrix.size();
    int m=matrix[0].size();
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(matrix[i][j]==target)
            {
                return true;
            }
        }
    }
    return false;
}

bool solve_In_NLogN(vector<vector<int>>& matrix,int target)
{
    int row=matrix.size();
    for(int i=0;i<row;i++)
    {
        int col=matrix[i].size();
        if(matrix[i][0]<=target && matrix[i][col-1]>=target)
        {
            int start=0;
            int end=col-1;
            while(start<=end)
            {
                int mid=(start+end)/2;
                if(matrix[i][mid]==target)
                {
                    return true;
                }
                else if(matrix[i][mid]>target)
                {
                    end=mid-1;
                }
                else 
                {
                    start=mid+1;
                }
            }
            return false;
        }
        
    }
    return false;
}

bool solve_In_LogNM(vector<vector<int>>& matrix,int target)
{
    int row=matrix.size();
    int col=matrix[0].size()-1;
    int start=0;
    int end=row-1;
    while(start<=end)
    {
        int mid=(start+end)/2;
        if(matrix[mid][0]<=target && matrix[mid][col]>=target)
        {
            start=0;
            end=matrix[mid].size()-1;
            while(start<=end)
            {
                int mid1=(start+end)/2;
                if(matrix[mid][mid1]==target) return true;
                else if(matrix[mid][mid1]>target) end=mid-1;
                else start=mid+1;
            }
            return false;
        }
        else if(matrix[mid][0]>target)  {end=mid-1;}
        else start=mid+1;
    }
    return false;
}
bool searchMatrix(vector<vector<int>>& matrix, int target) {

        // return solve_In_NN(matrix,target);
        // return solve_In_NLogN(matrix,target);
        return solve_In_LogNM(matrix,target);
    }
};
