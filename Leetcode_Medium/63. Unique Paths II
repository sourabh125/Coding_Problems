



//---------------------------------************* Solution-1 (recursion) *************---------------------------------------

class Solution {
public:
    int  count=0;
    void solve(vector<vector<int>>& obs,int row,int col,int crow,int ccol)
    {
        if(crow>row || ccol>col || obs[crow][ccol]==1) return;

        if(crow==row && ccol==col)
        {
            count++;
            return;
        }

        solve(obs,row,col,crow,ccol+1);
        solve(obs,row,col,crow+1,ccol);
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obs) {
        
        int row=obs.size()-1;
        int col=obs[0].size()-1;
        solve(obs,row,col,0,0);
        return count;
    }
};




// --------------------------------------------************ Solution-2 (DP) *************---------------------------------------------

class Solution {
public:
    int mod=(int)(1e9 + 7);
    
    int uniquePathsWithObstacles(vector<vector<int>>& obs) {
        
        int row=obs.size();
        int col=obs[0].size();
        vector<vector<int>> dp(row,vector<int>(col,0));
        
        for(int i=0;i<row;i++)
        {
            if(obs[i][0]==0) dp[i][0]=1;
            else break;
        }

        for(int i=0;i<col;i++)
        {
            if(obs[0][i]==0) dp[0][i]=1;
            else break;
        }

        for(int i=1;i<row;i++)
        {
            for(int j=1;j<col;j++)
            {
                if(obs[i][j]==0) dp[i][j]=dp[i-1][j]+dp[i][j-1];
                
            }
        }
        return dp[row-1][col-1];
    }
};
