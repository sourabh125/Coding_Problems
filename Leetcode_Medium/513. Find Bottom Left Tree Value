/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

//--------------------------------------------(Solution-1 (using map(level Order Traversal)))----------------------------------------------

class Solution {
public:
    map<int,vector<int>> mp;
    void solve(TreeNode* root,int level){
        if(root==NULL) return;
        mp[level].push_back(root->val);
        solve(root->left,level+1);
        solve(root->right,level+1);
    }
    int findBottomLeftValue(TreeNode* root) {
        int level=1;
        solve(root,level);
        return mp[mp.size()][0];
    }
};


//--------------------------------------------(Solution-2 (value and level track)))----------------------------------------------

class Solution {
public:
    int ans=0;
    void solve(TreeNode* root,int level,int& prevLevel){
        if(root==NULL) return;
        if(level>prevLevel){
            ans=root->val;
            prevLevel=level;
        }
        solve(root->left,level+1,prevLevel);
        solve(root->right,level+1,prevLevel);
    }
    int findBottomLeftValue(TreeNode* root) {
        if(root==NULL) return 0;
        
        int currLevel=0;
        int prevLevel=0;
        if(root->left==NULL && root->right==NULL) return root->val;
        solve(root,currLevel,prevLevel);
        return ans;
    }
};

