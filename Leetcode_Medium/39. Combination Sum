

// 

class Solution {
public:
    set<vector<int>> st;
    void solve_recursion(vector<int> &candidates,int target,int sum,vector<int> v,int n){
        if(sum==target){
            sort(v.begin(),v.end());
            st.insert(v);
            return;
        }
        if(sum>target){
            return;
        }
        for(int i=0;i<n;i++){
            v.push_back(candidates[i]);
            solve_recursion(candidates,target,sum+candidates[i],v,n);
            v.erase(v.end()-1);
        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        
        vector<vector<int>> ans;
        vector<int> temp;
        int n=candidates.size();
        solve_recursion(candidates,target,0,temp,n);
        for(auto i: st){
            ans.push_back(i);
        }
        return ans;
    }
};
