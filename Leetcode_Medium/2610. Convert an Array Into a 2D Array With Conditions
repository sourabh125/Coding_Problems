class Solution {
public:
    vector<vector<int>> solve_BF(vector<int>& nums){
        vector<vector<int>> ans;
        int ns=nums.size();
        for(int i=0;i<ns;i++)
        {
            bool isFit=false;
            for(int j=0;j<ans.size();j++){
                bool flag=false;
                for(int k=0;k<ans[j].size();k++){
                    if(nums[i]==ans[j][k]) {
                        flag=true;
                        break;  
                    }
                }
                if(flag==false){
                    ans[j].push_back(nums[i]);
                    isFit=true;
                    break;
                } 
            }
            if(isFit==false){
                vector<int> temp;
                temp.push_back(nums[i]);
                ans.push_back(temp);
            }
            
        }
        return ans;
    }
    vector<vector<int>> solve_using_map(vector<int>& nums){
        map<int,int> mp;
        vector<vector<int>> ans;
        int ns=nums.size();
        for(int i=0;i<ns;i++){
            mp[nums[i]]++;
        }
        for(auto i:mp){
            int j=0;
            while(j<ans.size() && i.second>0){
                ans[j].push_back(i.first);
                i.second--;
                j++;
            }
            while(i.second>0){
                vector<int> temp;
                temp.push_back(i.first);
                ans.push_back(temp);
                i.second--;
            }
        }
        return ans;
    }

    vector<vector<int>> solve_freq(vector<int>& nums) {
        unordered_map<int,int>mp;
        int cnt =0;

        for(auto a:nums){
            mp[a]++;
            cnt = max(cnt,mp[a]);
        }
        vector<vector<int>>v(cnt);
        for(auto a: mp){
            int num = a.first;
            int freq = a.second;

            for(int i =0;i<freq;i++){
                v[i].push_back(num);
            }
        }
        return v;
        
    }
    vector<vector<int>> findMatrix(vector<int>& nums) {
       
        // return solve_BF(nums);
        // return solve_using_map(nums);

        return solve_freq(nums);
    }
};
