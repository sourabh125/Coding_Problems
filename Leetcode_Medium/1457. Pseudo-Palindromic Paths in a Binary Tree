/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 //---------------------------(Solution-1 (MLE))------------------------------------------
class Solution {
public:
    int count=0;
    int countV=0;
    set<vector<int>> s;
    bool check_palindrom(vector<int> v){
        int oneCount=0;
        map<int,int> mp;
        int n=v.size();
        for(int i=0;i<n;i++){
            mp[v[i]]++;
        }
        for(auto i:mp){
            if(i.second%2!=0){
                oneCount++;
            }
        }
        if(oneCount==1 || oneCount==0) return true;
        return false;
    }
    void solve(TreeNode* root,vector<int> v){
        if(root==NULL){
            return;
        }
        if(root->left==NULL && root->right==NULL){
            v.push_back(root->val);
            if(check_palindrom(v)){
                count++;
            }
            return;
        }
        v.push_back(root->val);
        solve(root->left,v);
        solve(root->right,v);
    }
    int pseudoPalindromicPaths (TreeNode* root) {
        vector<int> v;
        solve(root,v);
        return count;
    }
};


//---------------------------(Solution-2 )------------------------------------------
class Solution {
public:
    int count=0;
    bool check_palindrom(map<int,int> mp){
        int oneCount=0;
        for(auto i:mp){
            if(i.second%2!=0){
                oneCount++;
            }
        }
        if(oneCount==1 || oneCount==0) return true;
        return false;
    }
    void solve(TreeNode* root,map<int,int> mp){
        if(root==NULL){
            return;
        }
        if(root->left==NULL && root->right==NULL){
            mp[root->val]++;
            if(check_palindrom(mp)){
                count++;
            }
            return;
        }
        mp[root->val]++;
        solve(root->left,mp);
        solve(root->right,mp);
    }
    int pseudoPalindromicPaths (TreeNode* root) {
        map<int,int> mp;
        solve(root,mp);
        return count;
    }
};


//---------------------------(Solution-3 (optimized))------------------------------------------


class Solution {
public:
    int count=0;
    void solve(TreeNode* root,vector<int>& v){
        if(root==NULL)  return;

        v[root->val]++;
        solve(root->left,v);
        solve(root->right,v);

        if(root->left==NULL && root->right==NULL){
            int oneCount=0;
            for(int i=0;i<v.size();i++){
                if(v[i]%2!=0) oneCount++;
            }
            if(oneCount==1 || oneCount==0) count++;
        }
        v[root->val]--;
    }
    int pseudoPalindromicPaths (TreeNode* root) {
        
        vector<int> v(10,0);
        solve(root,v);
        return count;
    }
};





