class Solution {
public:
    int solve1_using_map(vector<int>& nums){
        map<int,int> mp;
        int ans=0;
        int maxVal=0;
        int n=nums.size();
        for(int i=0;i<n;i++){
            mp[nums[i]]++;
            maxVal=max(maxVal,mp[nums[i]]);
        }
        for(auto i:mp){
            if(i.second==maxVal){
                ans+=i.second;
            }
        }
        return ans;
    }
    int solve2_using_sorting(vector<int>& nums){
        sort(nums.begin(),nums.end());
        int n=nums.size();
        int i=0,j=0;
        int maxCount=0;
        int ans=0;
        while(i<n){
            int count=0;
            while(j<n){
                if(nums[i]==nums[j]){    
                    j++;
                    count++;
                }
                else break;
                
            }
            if(count==maxCount){
                ans+=count;
            }
            else if(count>maxCount){
                ans=count;
                maxCount=count;
            }
            i=j;
        }
        return ans;
    }
    int solve_map_optimized(vector<int>& nums){
        map<int,int> mp;
        int maxCount=0;
        int ans=0;
        for(auto i:nums){
            mp[i]++;
            
            if(mp[i]==maxCount){
                ans+=mp[i];
            }
            else if(mp[i]>maxCount){
                ans=mp[i];
                maxCount=ans;
            }
        }
        return ans;
    }
    int maxFrequencyElements(vector<int>& nums) {
        
        // return solve1_using_map(nums);
        // return solve2_using_sorting(nums);
        return solve_map_optimized(nums);
    }
};
