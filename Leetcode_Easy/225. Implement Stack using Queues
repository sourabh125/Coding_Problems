
//----------------------*****(Solution-1 (Using 2 heap))******-------------------

class MyStack {
public:
    MyStack() {
    }
    stack<int> s;
    queue<int> q1;
    queue<int> q2;
    void push(int x) {
        while(!q1.empty()){
            q2.push(q1.front());
            q1.pop();
        }
        q1.push(x);
        while(!q2.empty()){
            q1.push(q2.front());
            q2.pop();
        }
    }
    
    int pop() {
        int temp=q1.front();
        q1.pop();
        return temp;
    }
    
    int top() {
        return q1.front();
    }
    
    bool empty() {
        if(q1.empty()){
            return true;
        }
        return false;
    }
};

//----------------------*****(Solution-2 (Stack))*****-----------------------
class MyStack {
public:
    MyStack() {
        
    }
    stack<int> s;
    queue<int> q;
    void push(int x) {
        s.push(x);
    }
    
    int pop() {
        int temp=s.top();
        s.pop();
        return temp;
    }
    
    int top() {
        return s.top();
    }
    
    bool empty() {
        if(s.empty())
        {
            return true;
        }
        return false;
    }
};


