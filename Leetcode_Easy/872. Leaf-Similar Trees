


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


class Solution {
public:
    vector<int> v1,v2;
    void solve_root(TreeNode* root,vector<int>& v){
        if(root==NULL ) return;
        if(root->left==NULL && root->right==NULL){
            v.push_back(root->val);
            return;
        }
        solve_root(root->left,v);
        solve_root(root->right,v);
    }
    bool compare_values(vector<int> v1,vector<int> v2){
        int v1n=v1.size();
        int v2n=v2.size();
        
        if(v1n!=v2n) return false;
        
        for(int i=0;i<v1n;i++){
            if(v1[i]==v2[i]) continue;
            else return false;
        }
        return true;
    }
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        
        solve_root(root1,v1);
        solve_root(root2,v2);
        if(compare_values(v1,v2)){
            return true;
        }
        return false;
    }
};


//-----------------------------------------------(solution 2)-----------------------------------

class Solution {
public:
    vector<int> v1,v2;
    void solve_root(TreeNode* root,vector<int>& v){
        if(root==NULL ) return;
        if(root->left==NULL && root->right==NULL){
            v.push_back(root->val);
            return;
        }
        solve_root(root->left,v);
        solve_root(root->right,v);
    }
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        
        solve_root(root1,v1);
        solve_root(root2,v2);
        return v1==v2;
    }
};
