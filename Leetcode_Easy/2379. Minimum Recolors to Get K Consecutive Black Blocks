class Solution {
public:
    int solve_in_nn(string blocks,int k)                   // Solution in Time Complexity O(N*N)
    {
        int mini=INT_MAX;
        int n=blocks.size();
        for(int i=0;i<=n-k;i++)
        {
            int count=0;
            for(int j=i;j<k+i;j++)
            {
                if(blocks[j]=='W') count++;
            }
            mini=min(mini,count);
        }
        return mini;
    }
    
    int solve_in_n(string blocks,int k)            // Solution in Time Complexity O(N) by using contention window
    {
        int start=0;
        int mini=INT_MAX;
        int count=0;
        int n=blocks.size();
        for(int i=0;i<n;i++)
        {
            if(i<k)
            {
                if(blocks[i]=='W') count++;  
                
            }
            else 
            {
                //If both, start and end the same value then no changes 
                // W-B combination then count--;
                 mini=min(mini,count);
                if(blocks[start]=='W' && blocks[i]=='B') { count--; mini=min(mini,count);}
                // B-W combination then count++;
                else if(blocks[start]=='B' && blocks[i]=='W') {count++; mini=min(mini,count);  }
                start++;
            }
        } 
        mini=min(mini,count);
        return mini;
    }
    int minimumRecolors(string blocks, int k) {
        
        // return solve_in_nn(blocks,k);
        
        return solve_in_n(blocks,k);
    }
};
