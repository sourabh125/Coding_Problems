//------------------------------------------------------(Solution-1)----------------------------------------------

class Solution {
public:
    bool solve(string words){
        int n=words.size();
        if(n%2==1){         // for odd no.
            int i=n/2;
            int j=i;
            while(i>=0 && j<n ){
                if(words[i]==words[j]){
                    i--;j++;
                }else{
                    return false;
                }
            }
        }
        else{               // for even lenght no. 
            int i=(n/2)-1;
            int j=i+1;
            while(i>=0 && j<n){
                if(words[i]==words[j]){
                    i--;j++;
                }
                else{
                    return false;
                }
            }
        }

        return true;
    }
    string firstPalindrome(vector<string>& words) {
     
        int n=words.size();
        for(int i=0;i<n;i++){
            if(solve(words[i])) return words[i];
        }
        return "";

    }
};


//------------------------------------------------------(Solution-2)----------------------------------------------
class Solution {
public:
    string firstPalindrome(vector<string>& words) {
     
        for(auto i:words){
            string s=i;
            reverse(s.begin(),s.end());
            if(s==i) return s;
        }
        return "";
    }
};



//------------------------------------------------------(Solution-3)----------------------------------------------

class Solution {
public:
    bool solve(string s){
        int i=0,j=s.size()-1;
        while(i<j){
            if(s[i]==s[j]){
                i++;j--;
            }
            else{
                return false;
            }
        }
        return true;
    }
    string firstPalindrome(vector<string>& words) {
     
        for(auto i:words){
            if(solve(i)) return i;
        }
        return "";
    }
};
