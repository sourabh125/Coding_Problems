
// Solution : 1 (iteratinve method)

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        if(list1==NULL && list2==NULL) return NULL;
        if(list1==NULL) return list2;
        if(list2==NULL) return list1;
        ListNode* ans=NULL;
        ListNode* temp=NULL;
        while(list1!=NULL && list2!=NULL)
        {
            if(list1->val<list2->val)
            {
                if(ans==NULL)
                {
                    temp=list1;
                    ans=temp;
                    
                }
                else{
                    temp->next=list1;
                    temp=temp->next;
                }
                list1=list1->next;
            }
            else{
                if(ans==NULL)
                {
                    temp=list2;
                    ans=temp;

                }
                else{
                    temp->next=list2;
                    temp=temp->next;
                }
                list2=list2->next;
            }
        }
        if(list1==NULL)
        {
            temp->next=list2;
        }
        if(list2==NULL)
        {
            temp->next=list1;
        }
        return ans;
    }
};

// ------------------------------------------- SOLUTION : 2 -----------------------------------------
//----------------------------------------- RECURSIVE SOLUTION -------------------------------------


class Solution {
public:
    void solve(ListNode* &ans,ListNode* &temp,ListNode* list1,ListNode* list2)
    {
        if(list1==NULL)
        {
            temp->next=list2;
            return;
        }
        if(list2==NULL)
        {
            temp->next=list1;
            return;
        }
        if(list1->val < list2->val)
        {
            if(temp==NULL)
            {
                ans=list1;
                temp=ans;
            }
            else
            {
                temp->next=list1;
                temp=temp->next;
            }
            solve(ans,temp,list1->next,list2);
        }
        else
        {
            if(temp==NULL)
            {
                ans=list2;
                temp=ans;
            }
            else
            {
                temp->next=list2;
                temp=temp->next;
            }
            solve(ans,temp,list1,list2->next);
        }
    }
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {

        if(list1==NULL && list2==NULL) return NULL;
        if(list1==NULL) return list2;
        if(list2==NULL) return list1;
        ListNode* ans=NULL;
        ListNode* temp=NULL;
        solve(ans,temp,list1,list2);
        return ans;
    }
};
