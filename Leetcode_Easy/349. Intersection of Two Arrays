class Solution {
public:
    vector<int> ans;
    void solve1(vector<int>& nums1,vector<int>& nums2){
        int i=0,j=0;
        while(i<nums1.size() && j<nums2.size()){
            if(nums1[i]<nums2[j]) i++;
            else if(nums1[i]>nums2[j]) j++;
            else{
                if(ans.size()==0){
                    ans.push_back(nums1[i]);
                }
                if(ans[ans.size()-1]!=nums1[i] && ans.size()>0){
                    ans.push_back(nums1[i]);
                }
                i++;j++;
            }
        }
    }

    void solve2(vector<int>& nums1,vector<int>& nums2){
        int n1=nums1.size();
        int n2=nums2.size();
        for(int i=0;i<n1;i++){
            for(int j=0;j<n2;j++){
                if(nums1[i]==nums2[j]){
                    if(ans.size()==0){
                        ans.push_back(nums1[i]);
                    }
                    else if(ans[ans.size()-1]!=nums2[j]){
                        ans.push_back(nums1[i]);
                    }
                    break;
                }
            }
        }
    }

    void solve3_using_map(vector<int>& nums1,vector<int>& nums2){
        unordered_map<int,int> mp;
        for(auto i:nums1){
            mp[i]++;
        }
        for(auto j:nums2){
            if(mp[j]){
                ans.push_back(j);
                mp[j]=0;
            }
        }
    }

    vector<int> solve4_optimized(vector<int>&nums1, vector<int>& nums2){
        unordered_map<int,int> um;
        vector<int> res;
        for(int i = 0; i < nums1.size(); i++)
        {
            um[nums1[i]]++;
        }
        for(int i = 0;i < nums2.size(); i++)
        {
            if(um.find(nums2[i]) != um.end())
            {
                res.push_back(nums2[i]);
                um.erase(nums2[i]);
            }
        }
        return res;
    }
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        
        //-------------------------------(Solution-1)-----------------------
        // sort(nums1.begin(),nums1.end());
        // sort(nums2.begin(),nums2.end());
        // solve1(nums1,nums2);
        // return ans;


        //-------------------------------(Solution-2)-----------------------
        // sort(nums1.begin(),nums1.end());
        // sort(nums2.begin(),nums2.end());
        // solve2(nums1,nums2);
        // return ans;


        //-------------------------------(Solution-3)-----------------------
        // solve3_using_map(nums1,nums2);
        // return ans;

        //-------------------------------(Solution-4)-----------------------

        return solve4_optimized(nums1,nums2);

        
    }
};
