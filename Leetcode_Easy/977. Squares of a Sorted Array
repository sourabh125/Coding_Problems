class Solution {
public:
    vector<int> solve1_using_squreandsort(vector<int>& nums){
        int n=nums.size();
        for(int i=0;i<n;i++) nums[i]=nums[i]*nums[i];
        sort(nums.begin(),nums.end());
        return nums;
    }
    vector<int> solve2_using2loop(vector<int>& nums){
        int n=nums.size();
        int size=0;
        while(nums[0]<0 && size<n){
            for(int i=0;i<n-1;i++){
                if(abs(nums[i])>abs(nums[i+1])) swap(nums[i],nums[i+1]);
            }
            size++;
        }
        for(int i=0;i<n;i++) nums[i]*=nums[i];
        return nums;
    }
    vector<int> solve3_using_heap(vector<int>& nums){
        priority_queue<int,vector<int>,greater<int>> minh;
        int n=nums.size();
        for(int i=0;i<n;i++) minh.push(nums[i]*nums[i]);
        int index=0;
        while(!minh.empty()){
            nums[index++]=minh.top();
            minh.pop();
        }
        return nums;                           
    }
    vector<int> solve4_twopointer(vector<int>& nums){
        int n=nums.size();
        vector<int> ans(n,0);
        int pos=n-1;
        for(int i=0;i<n;i++){
            nums[i]*=nums[i];
        }
        int i=0,j=n-1;
        while(i<=j){
            if(nums[i]>nums[j]){
                ans[pos--]=nums[i];
                i++;
            }
            else{
                ans[pos--]=nums[j];
                j--;
            } 
        }
        return ans;
    }
    vector<int> sortedSquares(vector<int>& nums) {
        
        // return solve1_using_squreandsort(nums);
        // return solve2_using2loop(nums);
        // return solve3_using_heap(nums);
        return solve4_twopointer(nums);
    }
};
