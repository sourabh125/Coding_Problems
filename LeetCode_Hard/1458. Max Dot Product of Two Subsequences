



//--------------------------------------------(Solution : 1 (Recusion)(MLE))-------------------------
class Solution {
public:
    vector<vector<int>> ans1;
    void solve_recursion(vector<int> &nums1,int idx,int size,vector<int> temp,vector<vector<int>>& ans)
    {
        if(idx==size){
            ans.push_back(temp);
            return;
        }
        temp.push_back(nums1[idx]);
        solve_recursion(nums1,idx+1,size,temp,ans);
        temp.erase(temp.end()-1);
        solve_recursion(nums1,idx+1,size,temp,ans);

    }
    int maxDotProduct(vector<int>& nums1, vector<int>& nums2) {
        
        // subsequence 
        int n1=nums1.size();
        int n2=nums2.size();
        vector<int> v;
        vector<vector<int>> ans1;
        vector<vector<int>> ans2;
        solve_recursion(nums1,0,n1,v,ans1);
        solve_recursion(nums2,0,n2,v,ans2);
        
        int as1=ans1.size();
        int as2=ans2.size();
        int maxi=INT_MIN;
        for(int i=0;i<as1;i++){
            int temp=ans1[i].size();
            for(int j=0;j<as2-1;j++){
                if(temp==ans2[j].size()){
                    int sum=0;
                    for(int k=0;k<temp;k++){
                        sum=sum+(ans1[i][k] * ans2[j][k]);
                    }
                    maxi=max(maxi,sum);
                }
            }
        }
        return maxi;
    }
};





//--------------------------------------(Solution : 2 (Optimized)(DP)--------------------------------
